/* Copyright Â© 2010, ST Electronics Info-comm Systems PTE. LTD All rights reserved.
 *
 * This software is confidential and proprietary property of 
 * ST Electronics (Info-comm Systems) PTE. LTD.
 * The user shall not disclose the contents of this software and shall
 * only use it in accordance with the terms and conditions stated in
 * the contract or license agreement with ST Electronics Info-comm Systems PTE. LTD.
 */
package com.stee.emas.cmh.common;

import java.util.Calendar;
import java.util.List;

import org.apache.log4j.Logger;
import org.quartz.DisallowConcurrentExecution;
import org.quartz.Job;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;
import org.quartz.SchedulerContext;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.stereotype.Component;

import com.stee.emas.cmh.integration.CMHMessageSender;
import com.stee.emas.cmh.service.impl.PreviewImageHandler;
import com.stee.emas.common.constants.MessageConstants;
import com.stee.emas.common.dto.PreviewImageDto;
import com.stee.emas.common.entity.TrafficAlertImagePreview;
import com.stee.emas.common.util.DTOConverter;

/**
 * 
 * @author Scindia
 * @since Nov 6, 2017
 * @version 1.0
 *
 */
@DisallowConcurrentExecution
@Component("previewImageExecutor")
public class PreviewImageExecutor implements Job {
	
	private static Logger logger = Logger.getLogger(PreviewImageExecutor.class);	
	
	@Autowired
	PreviewImageHandler previewImageHandler;
	@Autowired
	CMHMessageSender cmhMessageSender;
	
	@Override
	public void execute(JobExecutionContext context) throws JobExecutionException {
		logger.info("calling execute ..... ");
		SchedulerContext schedulerContext;
		try {
			schedulerContext = context.getScheduler().getContext();
			ApplicationContext applicationContext= (ApplicationContext)schedulerContext.get("CMH-Context");
			previewImageHandler =  (PreviewImageHandler)applicationContext.getBean("previewImageHandler");
			cmhMessageSender =  (CMHMessageSender)applicationContext.getBean("cmhMessageSender");

		} catch (Exception e) {
			e.printStackTrace();
		}
		logger.info("before calling process preview image..... ");

		processPreviewImage();
	}
	
	public void processPreviewImage() {
    	logger.info("PreviewImage Thread Started ..... ");
        while(true) {
        	try {
        		Calendar lCalendar = Calendar.getInstance();
        		lCalendar.set(Calendar.HOUR_OF_DAY, lCalendar.get(Calendar.HOUR_OF_DAY) - 2);
        		
        		logger.info("lCalendar.getTime() ....." + lCalendar.getTime());
        		logger.info("previewImageHandler ..... " + previewImageHandler);
        		
        		List<TrafficAlertImagePreview> lPreviewImageList = previewImageHandler.getAllPreviewImage(lCalendar.getTime());
        		logger.info("*****lPreviewImageList*****" + lPreviewImageList.size());
        		for (TrafficAlertImagePreview lTrafficAlertImagePreview : lPreviewImageList) {
        			boolean trafficAlertUpdated = previewImageHandler.processPendingImages(lTrafficAlertImagePreview);
        			logger.info("trafficAlertUpdated ....." + trafficAlertUpdated);
        			if (trafficAlertUpdated) {
        				PreviewImageDto lPreviewImageDto = DTOConverter.convert(PreviewImageDto.class, lTrafficAlertImagePreview);
                		logger.info("Object Sent to the Queue " + lPreviewImageDto);
                		cmhMessageSender.sendEmasCcsJmsMessage(lPreviewImageDto, MessageConstants.PREVIEW_IMAGE_ID);
        			}
        		}
        	} catch (Exception e) {
        		e.printStackTrace();
        		logger.error("Error processing PreviewImageExecutor ... ", e);
        	}
        }
    }
}