/* Copyright Â© 2010, ST Electronics Info-comm Systems PTE. LTD All rights reserved.
 *
 * This software is confidential and proprietary property of 
 * ST Electronics (Info-comm Systems) PTE. LTD.
 * The user shall not disclose the contents of this software and shall
 * only use it in accordance with the terms and conditions stated in
 * the contract or license agreement with ST Electronics Info-comm Systems PTE. LTD.
 */
package com.stee.emas.cmh.service.impl;

import java.util.Date;
import java.util.List;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.stee.emas.common.dao.TrafficAlertDao;
import com.stee.emas.common.entity.HistTrafficAlert;
import com.stee.emas.common.entity.TrafficAlert;
import com.stee.emas.common.entity.TrafficAlertImagePreview;

/*
 * @author Scindia
 * @since Nov 7, 2017
 * @version 1.0
 */
@Service
@Transactional
public class PreviewImageHandler {
	
	private static Logger logger = Logger.getLogger(PreviewImageHandler.class);
	
	@Autowired
	TrafficAlertDao trafficAlertDao;
	
	public List<TrafficAlertImagePreview> getAllPreviewImage(Date pDate) {
		if (logger.isDebugEnabled()) {
			logger.debug("Inside Manager -----------> getAllPreviewImage....." + pDate);
		}
		List<TrafficAlertImagePreview> lPreviewImageList = trafficAlertDao.getAllPreviewImageByDate(pDate);
		
		if (logger.isDebugEnabled()) {
			logger.debug("Exit Manager -----------> getAllPreviewImage.....");
		}
		return lPreviewImageList;
	}

	public boolean processPendingImages(TrafficAlertImagePreview pTrafficAlertImagePreview) {
		logger.info("Calling processPendingImages *****" + pTrafficAlertImagePreview.getAlertId());
		boolean trafficAlertUpdated = false;
		try {
			TrafficAlert lTrafficAlert = trafficAlertDao.findTrafficAlertById(pTrafficAlertImagePreview.getAlertId());
			if (lTrafficAlert != null) {
				lTrafficAlert.setImageUrl(pTrafficAlertImagePreview.getImageUrl());
				trafficAlertDao.updateTrafficAlert(lTrafficAlert);
				trafficAlertUpdated = true;
			} else {
				HistTrafficAlert lHistTrafficAlert = trafficAlertDao.findHistTrafficAlertById(pTrafficAlertImagePreview.getAlertId());
				if (lHistTrafficAlert != null) {
					lHistTrafficAlert.setImageUrl(pTrafficAlertImagePreview.getImageUrl());
					trafficAlertDao.updateHistTrafficAlert(lHistTrafficAlert);
					trafficAlertUpdated = true;
				}
			}
			if (trafficAlertUpdated) {
				trafficAlertDao.deleteTrafficAlertImagePreview(pTrafficAlertImagePreview);
			}
		} catch (Exception e) {
			trafficAlertUpdated = false;
    		logger.error("Error processing processPendingImages ... ", e);
    		e.printStackTrace();
		}
		logger.info("trafficAlertUpdated *****" + trafficAlertUpdated);

		return trafficAlertUpdated;
	}
}